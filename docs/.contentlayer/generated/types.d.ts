// NOTE This file is auto-generated by Contentlayer

import type { Markdown, MDX, ImageFieldData, IsoDateTimeString } from 'contentlayer/core'
import * as Local from 'contentlayer/source-files'

export { isType } from 'contentlayer/client'

export type { Markdown, MDX, ImageFieldData, IsoDateTimeString }

/** Document types */
export type Component = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'Component'
  title: string
  description: string
  order: number
  references?: References | undefined
  toc: boolean
  /** MDX file body */
  body: MDX
  componentName: string
  url: string
  tocData: json
  slug: string
  slugAsParams: string
}

export type Guides = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'Guides'
  title: string
  description: string
  order: number
  toc: boolean
  /** MDX file body */
  body: MDX
  url: string
  tocData: json
  slug: string
  slugAsParams: string
}

export type Overview = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'Overview'
  title: string
  description: string
  order: number
  references?: References | undefined
  toc: boolean
  /** MDX file body */
  body: MDX
  url: string
  tocData: json
  slug: string
  slugAsParams: string
}  

/** Nested types */
export type Radix = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'Radix'
  link?: string | undefined
  api?: string | undefined

}

export type References = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'References'
  shadcnUiLink?: string | undefined
  radix?: Radix | undefined

}  

/** Helper types */

export type AllTypes = DocumentTypes | NestedTypes
export type AllTypeNames = DocumentTypeNames | NestedTypeNames

export type DocumentTypes = Component | Guides | Overview
export type DocumentTypeNames = 'Component' | 'Guides' | 'Overview'

export type NestedTypes = Radix | References
export type NestedTypeNames = 'Radix' | 'References'

export type DataExports = {
  allDocuments: DocumentTypes[]
  allOverviews: Overview[]
  allGuides: Guides[]
  allComponents: Component[]
}


export interface ContentlayerGenTypes {
  documentTypes: DocumentTypes
  documentTypeMap: DocumentTypeMap
  documentTypeNames: DocumentTypeNames
  nestedTypes: NestedTypes
  nestedTypeMap: NestedTypeMap
  nestedTypeNames: NestedTypeNames
  allTypeNames: AllTypeNames
  dataExports: DataExports
}

declare global {
  interface ContentlayerGen extends ContentlayerGenTypes {}
}

export type DocumentTypeMap = {
  Component: Component
  Guides: Guides
  Overview: Overview
}

export type NestedTypeMap = {
  Radix: Radix
  References: References
}

 